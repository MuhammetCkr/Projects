// <auto-generated />
using System;
using FoodSite.Data.Concrete.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodSite.Data.Migrations
{
    [DbContext(typeof(FoodContext))]
    partial class FoodContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("FoodSite.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CategoryDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.Property<int>("CategoryPiece")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryDeleted = false,
                            CategoryName = "Kahvaltılık",
                            CategoryPiece = 0,
                            CategoryUrl = "kahvaltilik"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryDeleted = false,
                            CategoryName = "Kek",
                            CategoryPiece = 0,
                            CategoryUrl = "kek"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryDeleted = false,
                            CategoryName = "Tatlı",
                            CategoryPiece = 0,
                            CategoryUrl = "tatli"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryDeleted = false,
                            CategoryName = "Börek",
                            CategoryPiece = 0,
                            CategoryUrl = "borek"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryDeleted = false,
                            CategoryName = "Çorba",
                            CategoryPiece = 0,
                            CategoryUrl = "corba"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryDeleted = false,
                            CategoryName = "Makarna",
                            CategoryPiece = 0,
                            CategoryUrl = "makarna"
                        });
                });

            modelBuilder.Entity("FoodSite.Entity.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CommentApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommentDetails")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommentMail")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommentName")
                        .HasColumnType("TEXT");

                    b.HasKey("CommentId");

                    b.ToTable("Comment");

                    b.HasData(
                        new
                        {
                            CommentId = 1,
                            CommentApproved = true,
                            CommentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CommentDetails = "Harika bir kahvaltılık herkese öneririm",
                            CommentMail = "muhammetcukur@gmail.com",
                            CommentName = "Muhammet Çukur"
                        },
                        new
                        {
                            CommentId = 2,
                            CommentApproved = true,
                            CommentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CommentDetails = "Harika bir kek tarifi herkese öneririm",
                            CommentMail = "haticebayram@gmail.com",
                            CommentName = "Hatice Bayram"
                        },
                        new
                        {
                            CommentId = 3,
                            CommentApproved = true,
                            CommentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CommentDetails = "Harika bir tatlı tarifi herkese öneririm",
                            CommentMail = "bilalcukur@gmail.com",
                            CommentName = "Bilal Çukur"
                        },
                        new
                        {
                            CommentId = 4,
                            CommentApproved = true,
                            CommentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CommentDetails = "Harika bir börek tarifi herkese öneririm",
                            CommentMail = "haruncukur@gmail.com",
                            CommentName = "Harun Çukur"
                        },
                        new
                        {
                            CommentId = 5,
                            CommentApproved = true,
                            CommentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CommentDetails = "Harika bir çorba tarifi herkese öneririm",
                            CommentMail = "salihacukur@gmail.com",
                            CommentName = "Saliha Çukur"
                        });
                });

            modelBuilder.Entity("FoodSite.Entity.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FoodApproved")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FoodDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FoodDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FoodDetails")
                        .HasColumnType("TEXT");

                    b.Property<bool>("FoodHome")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FoodImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("FoodName")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FoodPuan")
                        .HasColumnType("TEXT");

                    b.Property<string>("FoodRecipe")
                        .HasColumnType("TEXT");

                    b.Property<string>("FoodUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("FoodId");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            FoodId = 1,
                            FoodApproved = true,
                            FoodDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDeleted = false,
                            FoodHome = true,
                            FoodImage = "firinda-peynirli-ekmek.jpg",
                            FoodName = "Fırında Peynirli Ekmek",
                            FoodPuan = 9m,
                            FoodRecipe = "Bir kasede rendelenmiş peynirleri, yumurta, nane, pul biber, maydanoz ve zeytinyağı ile birlikte karıştırın.",
                            FoodUrl = "firinda-peynirli-ekmek"
                        },
                        new
                        {
                            FoodId = 2,
                            FoodApproved = true,
                            FoodDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDeleted = false,
                            FoodHome = true,
                            FoodImage = "damla-cikolatali-kek.jpg",
                            FoodName = "Damla Çikolatalı Kek",
                            FoodPuan = 8m,
                            FoodRecipe = "Kek kalıbınızı tereyağı ile yağladıktan sonra buzdolabında 5 dakika kadar bekletirseniz pişme sonucunda kekiniz kalıptan rahatça çıkacaktır. Kakaolu keklerde kakao, sade un kullandığınız keklerde kalıba tereyağından sonra un serperseniz yine kalıptan çıkmasını kolaylaştırırsınız. Un ekledikten sonra çırpıcı ile değil spatula yada çırpma teli ile sadece karışana kadar çırpmanız kekinizin güzel kabarmasını sağlar. Unu elemeniz de daha çok kabarmasını sağlar.",
                            FoodUrl = "damla-cikolatali-kek"
                        },
                        new
                        {
                            FoodId = 3,
                            FoodApproved = true,
                            FoodDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDeleted = false,
                            FoodHome = true,
                            FoodImage = "sultan-sarmasi.jpg",
                            FoodName = "Sultan Sarması",
                            FoodPuan = 9m,
                            FoodRecipe = "Bir tencerede un, toz şeker ve kakaoyu karıştırıp, üzerine yavaşça süt ilave edip sürekli karıştırarak orta ateşte pişirin.",
                            FoodUrl = "sultan-sarmasi"
                        },
                        new
                        {
                            FoodId = 4,
                            FoodApproved = true,
                            FoodDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDeleted = false,
                            FoodHome = true,
                            FoodImage = "avci-boregi.jpg",
                            FoodName = "Avcı Böreği",
                            FoodPuan = 9m,
                            FoodRecipe = "Fırında pişirme ya da kızartma esnasında dağılmaması için börekleri çok fazla iç harçla doldurmamaya ve gevşek bir şekilde sarmamaya özen gösterin.Böreklerin her tarafını çırpılmış yumurta ve galeta ununa bulayın.",
                            FoodUrl = "avci-boregi"
                        },
                        new
                        {
                            FoodId = 5,
                            FoodApproved = true,
                            FoodDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodDeleted = false,
                            FoodHome = true,
                            FoodImage = "mercimek-corbasi.jpg",
                            FoodName = "Mercimek Çorbası",
                            FoodPuan = 9m,
                            FoodRecipe = "Zeytinyağını koyduğunuz tencereyi orta-kısık ateşe alarak ısıtın.Soğanı rendeleyin veya küp küp doğrağın, tencereye ekleyerek hafifçe kavurmaya başlayın.",
                            FoodUrl = "mercimek-corbasi"
                        });
                });

            modelBuilder.Entity("FoodSite.Entity.FoodCategory", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FoodId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("FoodCategories");

                    b.HasData(
                        new
                        {
                            FoodId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            FoodId = 2,
                            CategoryId = 2
                        },
                        new
                        {
                            FoodId = 3,
                            CategoryId = 3
                        },
                        new
                        {
                            FoodId = 4,
                            CategoryId = 4
                        },
                        new
                        {
                            FoodId = 5,
                            CategoryId = 5
                        });
                });

            modelBuilder.Entity("FoodSite.Entity.FoodComment", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FoodId", "CommentId");

                    b.HasIndex("CommentId");

                    b.ToTable("FoodComments");
                });

            modelBuilder.Entity("FoodSite.Entity.FoodMaterial", b =>
                {
                    b.Property<int>("FoodId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaterialId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FoodId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("FoodMaterials");

                    b.HasData(
                        new
                        {
                            FoodId = 1,
                            MaterialId = 1
                        },
                        new
                        {
                            FoodId = 1,
                            MaterialId = 2
                        },
                        new
                        {
                            FoodId = 1,
                            MaterialId = 3
                        },
                        new
                        {
                            FoodId = 1,
                            MaterialId = 4
                        },
                        new
                        {
                            FoodId = 1,
                            MaterialId = 5
                        },
                        new
                        {
                            FoodId = 1,
                            MaterialId = 6
                        },
                        new
                        {
                            FoodId = 1,
                            MaterialId = 7
                        },
                        new
                        {
                            FoodId = 1,
                            MaterialId = 8
                        },
                        new
                        {
                            FoodId = 1,
                            MaterialId = 9
                        },
                        new
                        {
                            FoodId = 1,
                            MaterialId = 10
                        },
                        new
                        {
                            FoodId = 1,
                            MaterialId = 11
                        },
                        new
                        {
                            FoodId = 1,
                            MaterialId = 12
                        });
                });

            modelBuilder.Entity("FoodSite.Entity.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MaterialName")
                        .HasColumnType("TEXT");

                    b.HasKey("MaterialId");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            MaterialId = 1,
                            MaterialName = "Ayçiçek Yağı"
                        },
                        new
                        {
                            MaterialId = 2,
                            MaterialName = "Kuru Soğan"
                        },
                        new
                        {
                            MaterialId = 3,
                            MaterialName = "Un"
                        },
                        new
                        {
                            MaterialId = 4,
                            MaterialName = "Havuç"
                        },
                        new
                        {
                            MaterialId = 5,
                            MaterialName = "Patates"
                        },
                        new
                        {
                            MaterialId = 6,
                            MaterialName = "Tuz"
                        },
                        new
                        {
                            MaterialId = 7,
                            MaterialName = "Karabiber"
                        },
                        new
                        {
                            MaterialId = 8,
                            MaterialName = "Kırmızı Mercimek"
                        },
                        new
                        {
                            MaterialId = 9,
                            MaterialName = "Sarı Mercimek"
                        },
                        new
                        {
                            MaterialId = 10,
                            MaterialName = "Su"
                        },
                        new
                        {
                            MaterialId = 11,
                            MaterialName = "Tereyağ"
                        },
                        new
                        {
                            MaterialId = 12,
                            MaterialName = "Kırmızı Toz Biber"
                        });
                });

            modelBuilder.Entity("FoodSite.Entity.FoodCategory", b =>
                {
                    b.HasOne("FoodSite.Entity.Category", "Category")
                        .WithMany("FoodCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodSite.Entity.Food", "Food")
                        .WithMany("FoodCategories")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("FoodSite.Entity.FoodComment", b =>
                {
                    b.HasOne("FoodSite.Entity.Comment", "Comment")
                        .WithMany("FoodComments")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodSite.Entity.Food", "Food")
                        .WithMany("FoodComments")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Food");
                });

            modelBuilder.Entity("FoodSite.Entity.FoodMaterial", b =>
                {
                    b.HasOne("FoodSite.Entity.Food", "Food")
                        .WithMany("FoodMaterials")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodSite.Entity.Material", "Material")
                        .WithMany("FoodMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("FoodSite.Entity.Category", b =>
                {
                    b.Navigation("FoodCategories");
                });

            modelBuilder.Entity("FoodSite.Entity.Comment", b =>
                {
                    b.Navigation("FoodComments");
                });

            modelBuilder.Entity("FoodSite.Entity.Food", b =>
                {
                    b.Navigation("FoodCategories");

                    b.Navigation("FoodComments");

                    b.Navigation("FoodMaterials");
                });

            modelBuilder.Entity("FoodSite.Entity.Material", b =>
                {
                    b.Navigation("FoodMaterials");
                });
#pragma warning restore 612, 618
        }
    }
}
